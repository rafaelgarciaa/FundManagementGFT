package com.fondosGFT.fondosGFT.model.fund.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;

/**
 * Data Transfer Object (DTO) designed for sending investment fund information as part of an API response.
 * This DTO provides a clear and concise representation of a fund's key attributes,
 * suitable for consumption by client applications. It's essentially identical to {@link FundDTO}
 * but explicitly named for response purposes to maintain clarity in API design.
 * <p>
 * Lombok annotations are utilized to reduce boilerplate code:
 * <ul>
 * <li>{@code @Data}: Automatically generates getters, setters, {@code equals()},
 * {@code hashCode()}, and {@code toString()} methods for all fields.</li>
 * <li>{@code @NoArgsConstructor}: Creates a constructor with no arguments, useful for
 * object instantiation during deserialization.</li>
 * <li>{@code @AllArgsConstructor}: Generates a constructor with arguments for all fields,
 * providing a convenient way to initialize all properties upon object creation.</li>
 * </ul>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class FundResponseDTO {
    /**
     * The unique identifier for the fund.
     * This ID is typically generated by the persistence layer and used to uniquely reference the fund.
     */
    private String id;
    /**
     * The official name of the investment fund.
     */
    private String name;
    /**
     * The type of product the fund represents (e.g., "Equity Fund", "Bond Fund", "Mixed Fund").
     */
    private String productType;
    /**
     * The minimum amount required for a single subscription to this fund.
     * This field uses {@link BigDecimal} for precise monetary calculations, ensuring accuracy
     * with financial values.
     */
    private BigDecimal minimumSubscriptionAmount;
}